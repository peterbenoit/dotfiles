[
    {
        "type": "file",
        "name": ".eslintrc.json",
        "content": "{\n    \"env\": {\n        \"browser\": true,\n        \"es2021\": true\n    },\n    \"extends\": [\"eslint:recommended\", \"plugin:prettier/recommended\"],\n  \t\"plugins\": [\"prettier\"],\n    \"parserOptions\": {\n        \"ecmaVersion\": 12,\n        \"sourceType\": \"module\"\n    },\n\t\"rules\": {\n\t\t\"quotes\": [\"error\", \"single\"],\n\t\t\"semi\": [\"error\", \"always\"],\n\t\t\"space-in-parens\": [\"error\", \"always\"],\n\t\t\"prettier/prettier\": [\"error\", {\n\t\t\"singleQuote\": true\n\t\t}]\n\t}\n}\n"
    },
    {
        "type": "file",
        "name": ".gitattributes",
        "content": "# Auto detect text files and perform LF normalization\n* text=auto\n"
    },
    { "type": "file", "name": ".gitignore", "content": "Brewfile.lock.json\n" },
    {
        "type": "file",
        "name": ".prettierrc",
        "content": "{\n\t\"semi\": true,\n\t\"singleQuote\": true,\n\t\"printWidth\": 100,\n\t\"trailingComma\": \"es5\",\n\t\"tabWidth\": 4\n}\n"
    },
    {
        "type": "file",
        "name": ".zshrc",
        "content": "# ====================================================================\n# PowerLevel10k Configuration\n# ====================================================================\n# Enable Powerlevel10k instant prompt (keep at top)\nif [[ -r \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\" ]]; then\n  source \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\"\nfi\n\n# ====================================================================\n# Oh My Zsh Configuration\n# ====================================================================\nexport ZSH=\"$HOME/.oh-my-zsh\"\nZSH_THEME=\"powerlevel10k/powerlevel10k\"\nplugins=(\n  git\n  vscode\n  npm\n  yarn\n  node\n  macos\n  brew\n  z\n  zsh-autosuggestions\n  zsh-syntax-highlighting\n)\nsource $ZSH/oh-my-zsh.sh\n\n# ====================================================================\n# Path Configuration\n# ====================================================================\n# Homebrew\nexport PATH=\"/usr/local/bin:/usr/local/sbin:/opt/homebrew/bin:/opt/homebrew/sbin:$PATH\"\n\n# Python\nexport PATH=\"/opt/homebrew/opt/python@3.12/bin:$PATH\"\nalias python='python3'\nalias pip='pip3'\n\n# Node Version Manager (NVM)\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n\n# Pyenv\nexport PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init --path)\"\neval \"$(pyenv init -)\"\n\n# Cargo/Rust\n[ -f \"$HOME/.cargo/env\" ] && source \"$HOME/.cargo/env\"\n\n# Deno\n[ -f \"$HOME/.deno/env\" ] && source \"$HOME/.deno/env\"\n\n# ====================================================================\n# Editor Configuration\n# ====================================================================\nexport EDITOR=\"code --wait\"\n\n# ====================================================================\n# Front-End Development Aliases\n# ====================================================================\n# React shortcuts\nalias cra=\"npx create-react-app\"\nalias crats=\"npx create-react-app --template typescript\"\nalias next=\"npx create-next-app\"\nalias nextts=\"npx create-next-app --typescript\"\nalias vite=\"npm create vite@latest\"\n\n# Vue shortcuts\nalias vue=\"npm init vue@latest\"\n\n# Angular shortcuts\nalias ng=\"npx @angular/cli\"\nalias ngnew=\"npx @angular/cli new\"\n\n# NPM shortcuts\nalias ni=\"npm install\"\nalias nid=\"npm install --save-dev\"\nalias nig=\"npm install -g\"\nalias nr=\"npm run\"\nalias nrs=\"npm run start\"\nalias nrd=\"npm run dev\"\nalias nrb=\"npm run build\"\nalias nrt=\"npm run test\"\nalias nrl=\"npm run lint\"\n\n# Yarn shortcuts\nalias yi=\"yarn install\"\nalias ya=\"yarn add\"\nalias yad=\"yarn add --dev\"\nalias yr=\"yarn run\"\nalias yrs=\"yarn run start\"\nalias yrd=\"yarn run dev\"\nalias yrb=\"yarn run build\"\nalias yrt=\"yarn run test\"\nalias yrl=\"yarn run lint\"\n\n# Web dev shortcuts\nalias serve=\"npx serve\"\nalias netlify=\"npx netlify-cli\"\nalias surge=\"npx surge\"\nalias vercel=\"npx vercel\"\nalias firebase=\"npx firebase-tools\"\n\n# Performance testing\nalias lighthouse=\"npx lighthouse\"\nalias bundlesize=\"npx bundlesize\"\nalias sizereport=\"npx size-limit\"\n\n# Linting and Formatting\nalias lint=\"npm run lint\"\nalias format=\"npm run format\"\nalias eslintfix=\"npx eslint --fix\"\nalias prettierfix=\"npx prettier --write\"\n\n# ====================================================================\n# General Aliases\n# ====================================================================\n# Navigation\nalias ll=\"ls -la\"\nalias la=\"ls -a\"\nalias ..=\"cd ..\"\nalias ...=\"cd ../..\"\nalias ....=\"cd ../../..\"\nalias ~=\"cd ~\"\nalias c=\"clear\"\n\n# System\nalias reload=\"source ~/.zshrc\"\nalias brewup=\"brew update && brew upgrade && brew cleanup\"\nalias brewlist=\"brew list --cask\"\nalias bcleanup=\"brew cleanup\"\nalias trash=\"rm -rf ~/.Trash/*\"\nalias dotfiles=\"code ~/.zshrc\"\n\n# Networking\nalias ip=\"curl ifconfig.me\"\nalias myip=\"ifconfig | grep 'inet ' | grep -v 127.0.0.1\"\nalias ports=\"lsof -i -P | grep -i 'listen'\"\nalias localip=\"ipconfig getifaddr en0\"\n\n# ====================================================================\n# Git Aliases\n# ====================================================================\nalias ga=\"git add\"\nalias gc=\"git commit -m\"\nalias gp=\"git push\"\nalias gpl=\"git pull\"\nalias gst=\"git status\"\nalias gco=\"git checkout\"\nalias gcb=\"git checkout -b\"\nalias gb=\"git branch\"\nalias gm=\"git merge\"\nalias gl=\"git log --oneline --graph\"\nalias grh=\"git reset --hard\"\nalias grs=\"git reset --soft\"\nalias gf=\"git fetch\"\nalias gcl=\"git clone\"\nalias gr=\"git remote\"\nalias grv=\"git remote -v\"\n\n# ====================================================================\n# Folder shortcuts\n# ====================================================================\nalias github=\"cd ~/GitHub\"\nalias projects=\"cd ~/Projects\"\nalias straypath=\"cd ~/GitHub/straypathcom\"\n\n# Image processing (from your cdn script)\nalias process-images=\"~/GitHub/straypathcom/cdn/remove_metadata.sh\"\n\n# ====================================================================\n# Front-End Development Functions\n# ====================================================================\n# Create a new project with common front-end setup\nfunction create-fe-project() {\n  mkdir -p $1/src/{assets,components,styles,utils}\n  touch $1/README.md\n  cd $1\n  npm init -y\n  npm i -D eslint prettier eslint-config-prettier eslint-plugin-prettier\n  echo \"Front-end project structure created in $1\"\n}\n\n# Optimize images in current directory\nfunction optimize-images() {\n  for file in *.{jpg,jpeg,png,gif}; do\n    if [ -f \"$file\" ]; then\n      echo \"Optimizing $file...\"\n      imageoptim \"$file\"\n    fi\n  done\n}\n\n# Start a local web server in the current directory\nfunction webserver() {\n  local port=${1:-8000}\n  echo \"Starting web server at http://localhost:$port\"\n  python -m http.server $port\n}\n\n# Create a new React component\nfunction new-component() {\n  mkdir -p src/components/$1\n\n  # Create component file\n  cat > src/components/$1/$1.jsx << EOF\nimport React from 'react';\nimport './$1.css';\n\nconst $1 = (props) => {\n  return (\n    <div className=\"$1\">\n      $1 Component\n    </div>\n  );\n};\n\nexport default $1;\nEOF\n\n  # Create CSS file\n  cat > src/components/$1/$1.css << EOF\n.$1 {\n  /* Add your styles here */\n}\nEOF\n\n  # Create test file\n  cat > src/components/$1/$1.test.jsx << EOF\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport $1 from './$1';\n\ntest('renders $1 component', () => {\n  render(<$1 />);\n  const element = screen.getByText(/$1 Component/i);\n  expect(element).toBeInTheDocument();\n});\nEOF\n\n  echo \"$1 component created with CSS and test file\"\n}\n\n# ====================================================================\n# Additional Tool Configuration\n# ====================================================================\n# Angular CLI autocompletion\n[ -x \"$(command -v ng)\" ] && source <(ng completion script)\n\n# fnm - Fast Node Manager\nif [ -x \"$(command -v fnm)\" ]; then\n  eval \"$(fnm env --use-on-cd)\"\nfi\n\n# ====================================================================\n# Environment Variables\n# ====================================================================\n# Store sensitive tokens in a separate file that isn't committed to Git\n[ -f ~/.tokens.zsh ] && source ~/.tokens.zsh\n\n# Front-end related environment variables\n# export NODE_ENV=\"development\"\nexport BROWSER=\"chrome\"\n\n# ====================================================================\n# Powerlevel10k Configuration\n# ====================================================================\n[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"/opt/homebrew/opt/nvm/nvm.sh\" ] && \\. \"/opt/homebrew/opt/nvm/nvm.sh\"\n\n# Added by Windsurf\nexport PATH=\"/Users/peterbenoit/.codeium/windsurf/bin:$PATH\"\n"
    },
    {
        "type": "file",
        "name": "Brewfile",
        "content": "# brew bundle dump\n# brew bundle\ntap \"homebrew/bundle\"\n\n# === Programming Languages & Runtimes ===\nbrew \"python@3.12\"\nbrew \"node\"               # JavaScript runtime (includes npm)\nbrew \"deno\"               # Secure JavaScript/TypeScript runtime\n\n# === Version Control ===\nbrew \"git\"\nbrew \"gh\"                 # GitHub CLI\n\n# === Front-End Tools ===\nbrew \"yarn\"               # Package manager (Homebrew recommended over npm)\nbrew \"fonttools\"          # Font manipulation\nbrew \"pnpm\"               # Fast, disk space efficient package manager\n\n# === Backend & API Tools ===\nbrew \"supabase/tap/supabase\"  # Supabase CLI for local development\nbrew \"firebase-cli\"          # Firebase CLI for local development\n\n# === Database Tools ===\nbrew \"postgresql\"         # Object-relational database system\nbrew \"redis\"              # In-memory data structure store\n\n# === API Development ===\ncask \"postman\"            # API platform for building and using APIs\ncask \"insomnia\"           # REST and GraphQL API client\nbrew \"curl\"               # Command line tool for transferring data with URLs\nbrew \"httpie\"             # User-friendly HTTP client\n\n# === Containerization & Virtualization ===\nbrew \"docker\"             # Container platform\nbrew \"podman\"             # Alternative container platform\nbrew \"minikube\"           # Local Kubernetes\nbrew \"kubernetes-cli\"     # Command-line tool for Kubernetes\ncask \"vagrant\"            # Tool for building and managing virtualized development environments\n\n# === Testing Tools ===\nbrew \"selenium-server-standalone\" # Selenium server for browser automation\nbrew \"k6\"                 # Modern load testing tool\nbrew \"locust\"             # Scalable user load testing tool\n\n# === Static Site Generators ===\nbrew \"hugo\"               # Static site generator (Go-based, use Homebrew)\n\n# === Terminal Enhancements ===\nbrew \"zsh-autosuggestions\"\nbrew \"zsh-syntax-highlighting\"\nbrew \"htop\"\nbrew \"jq\"                 # JSON processor\nbrew \"neofetch\"\nbrew \"tree\"\nbrew \"ncdu\"\nbrew \"glances\"\nbrew \"wget\"\nbrew \"nmap\"\ncask \"warp\"               # Modern, GPU-accelerated terminal with AI features\n\n# === Front-End Desktop Apps ===\ncask \"visual-studio-code\" # Code editor\ncask \"figma\"              # UI design tool\ncask \"browserstacklocal\"  # Cross-browser testing\ncask \"responsively\"       # Responsive web design testing\n\n# === Browsers ===\ncask \"google-chrome\"\ncask \"firefox\"\ncask \"firefox@developer-edition\"\ncask \"brave-browser\"\n\n# === Utilities ===\ncask \"bitwarden\"          # Password manager\ncask \"alfred\"             # Productivity app\ncask \"bartender\"          # Menu bar organizer\ncask \"chatgpt\"            # ChatGPT client\ncask \"github\"             # GitHub desktop client\ncask \"iterm2\"             # Terminal emulator\ncask \"snagit\"             # Screen capture software\ncask \"vlc\"                # Media player\ncask \"wireshark\"          # Network protocol analyzer\ncask \"protonvpn\"          # VPN client\ncask \"affinity-photo\"     # Photo editing software\n"
    },
    {
        "type": "file",
        "name": "fe-init.sh",
        "content": "#!/bin/bash\n\n# Color codes for terminal output\nGREEN='\\033[0;32m'\nBLUE='\\033[0;34m'\nYELLOW='\\033[1;33m'\nRED='\\033[0;31m'\nNC='\\033[0m' # No Color\n\n# Print header\necho -e \"${BLUE}========================================${NC}\"\necho -e \"${BLUE}   Front-End Project Initializer   ${NC}\"\necho -e \"${BLUE}========================================${NC}\"\n\nshow_help() {\n  echo \"Usage: ./fe-init.sh [options]\"\n  echo \"Creates a new front-end project with best practices and configuration\"\n  echo\n  echo \"Options:\"\n  echo \"  --dry-run       Show what would be done without making changes\"\n  echo \"  --help          Show this help message\"\n  echo\n  echo \"Project types supported:\"\n  echo \"  - React\"\n  echo \"  - React + TypeScript\"\n  echo \"  - Next.js\"\n  echo \"  - Vue.js\"\n  echo \"  - Angular\"\n  echo \"  - Static HTML/CSS/JS\"\n  echo \"  - React + Vite\"\n  echo \"  - Vue + Vite\"\n  exit 0\n}\n\n# Check for help flag\nfor arg in \"$@\"; do\n  if [ \"$arg\" == \"--help\" ]; then\n    show_help\n  fi\ndone\n\n# Check for dry run flag\nDRY_RUN=false\nfor arg in \"$@\"; do\n  if [ \"$arg\" == \"--dry-run\" ]; then\n    DRY_RUN=true\n    echo -e \"${YELLOW}DRY RUN: No changes will be made${NC}\"\n  fi\ndone\n\n# Get project name with validation\nget_valid_project_name() {\n  while true; do\n    read -p \"$(echo -e $YELLOW\"Enter project name: \"$NC)\" PROJECT_NAME\n\n    # Check if name is empty\n    if [ -z \"$PROJECT_NAME\" ]; then\n      echo -e \"${RED}Error: Project name cannot be empty${NC}\"\n      continue\n    fi\n\n    # Check if name is valid (alphanumeric, dash, underscore)\n    if ! [[ $PROJECT_NAME =~ ^[a-zA-Z0-9_-]+$ ]]; then\n      echo -e \"${RED}Error: Project name can only contain letters, numbers, underscores and dashes${NC}\"\n      continue\n    fi\n\n    # Choose location\n    read -p \"$(echo -e $YELLOW\"Where to create project? [1: ~/GitHub (default), 2: Current directory, 3: Custom location]: \"$NC)\" LOCATION_CHOICE\n\n    case $LOCATION_CHOICE in\n      2)\n        PROJECT_DIR=\"$(pwd)/$PROJECT_NAME\"\n        ;;\n      3)\n        read -p \"$(echo -e $YELLOW\"Enter custom location: \"$NC)\" CUSTOM_LOCATION\n        PROJECT_DIR=\"$CUSTOM_LOCATION/$PROJECT_NAME\"\n        ;;\n      *)\n        PROJECT_DIR=\"$HOME/GitHub/$PROJECT_NAME\"\n        ;;\n    esac\n\n    # Check if project directory already exists\n    if [ -d \"$PROJECT_DIR\" ]; then\n      echo -e \"${RED}Error: $PROJECT_DIR already exists${NC}\"\n      read -p \"$(echo -e $YELLOW\"Choose a different name? [y/n]: \"$NC)\" -n 1 -r\n      echo\n      if [[ $REPLY =~ ^[Yy]$ ]]; then\n        continue\n      else\n        echo -e \"${RED}Project initialization cancelled${NC}\"\n        exit 1\n      fi\n    fi\n\n    # All checks passed\n    break\n  done\n}\n\n# Get project name\nget_valid_project_name\n\n# Select project type\necho -e \"${BLUE}Select project type:${NC}\"\necho \"1) React with Vite\"\necho \"2) React + TypeScript with Vite\"\necho \"3) Next.js\"\necho \"4) Vue.js with Vite\"\necho \"5) Angular\"\necho \"6) Static HTML/CSS/JS\"\necho \"7) Exit without creating a project\"\n\nread -p \"$(echo -e $YELLOW\"Select an option (1-7): \"$NC)\" PROJECT_TYPE\n\nif [ \"$PROJECT_TYPE\" == \"7\" ]; then\n  echo -e \"${BLUE}Exiting without creating a project${NC}\"\n  exit 0\nfi\n\nif [ \"$PROJECT_TYPE\" -lt 1 ] || [ \"$PROJECT_TYPE\" -gt 7 ]; then\n  echo -e \"${RED}Invalid option selected. Exiting.${NC}\"\n  exit 1\nfi\n\n# Create project directory\nif ! $DRY_RUN; then\n  echo -e \"${GREEN}Creating project directory: $PROJECT_DIR${NC}\"\n  mkdir -p \"$PROJECT_DIR\"\n  cd \"$PROJECT_DIR\"\nelse\n  echo -e \"${YELLOW}Would create directory: $PROJECT_DIR${NC}\"\nfi\n\n# Initialize Git repository\nif ! $DRY_RUN; then\n  echo -e \"${GREEN}Initializing Git repository...${NC}\"\n  git init\nelse\n  echo -e \"${YELLOW}Would initialize Git repository${NC}\"\nfi\n\n# Create .gitignore file\nif ! $DRY_RUN; then\n  echo -e \"${GREEN}Creating .gitignore file...${NC}\"\n  cat > .gitignore << EOF\n# Dependencies\nnode_modules/\n.pnp/\n.pnp.js\n\n# Testing\n/coverage\n\n# Production\n/build\n/dist\n/out\n/.next\n/.nuxt\n\n# Misc\n.DS_Store\n.env\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n*.log*\n\n# Editor directories and files\n.idea/\n.vscode/*\n!.vscode/extensions.json\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\nEOF\nelse\n  echo -e \"${YELLOW}Would create .gitignore file${NC}\"\nfi\n\n# Create README.md\nif ! $DRY_RUN; then\n  echo -e \"${GREEN}Creating README.md...${NC}\"\n  cat > README.md << EOF\n# $PROJECT_NAME\n\n## Overview\nFront-end project created with fe-init.sh\n\n## Getting Started\n### Installation\n\\`\\`\\`bash\nnpm install\n\\`\\`\\`\n\n### Development\n\\`\\`\\`bash\nnpm run dev\n\\`\\`\\`\n\n### Build\n\\`\\`\\`bash\nnpm run build\n\\`\\`\\`\nEOF\nelse\n  echo -e \"${YELLOW}Would create README.md${NC}\"\nfi\n\n# Setup project based on selected type\ncase $PROJECT_TYPE in\n  1) # React with Vite\n    if ! $DRY_RUN; then\n      echo -e \"${GREEN}Setting up React project with Vite...${NC}\"\n      npm create vite@latest . -- --template react\n      npm install --save-dev eslint-config-prettier prettier\n    else\n      echo -e \"${YELLOW}Would set up React project with Vite${NC}\"\n    fi\n    ;;\n\n  2) # React + TypeScript with Vite\n    if ! $DRY_RUN; then\n      echo -e \"${GREEN}Setting up React + TypeScript project with Vite...${NC}\"\n      npm create vite@latest . -- --template react-ts\n      npm install --save-dev eslint-config-prettier prettier\n    else\n      echo -e \"${YELLOW}Would set up React + TypeScript project with Vite${NC}\"\n    fi\n    ;;\n\n  3) # Next.js\n    if ! $DRY_RUN; then\n      echo -e \"${GREEN}Setting up Next.js project...${NC}\"\n      npx create-next-app@latest . --use-npm\n    else\n      echo -e \"${YELLOW}Would set up Next.js project${NC}\"\n    fi\n    ;;\n\n  4) # Vue.js with Vite\n    if ! $DRY_RUN; then\n      echo -e \"${GREEN}Setting up Vue.js project with Vite...${NC}\"\n      npm create vite@latest . -- --template vue\n      npm install --save-dev eslint-config-prettier prettier\n    else\n      echo -e \"${YELLOW}Would set up Vue.js project with Vite${NC}\"\n    fi\n    ;;\n\n  5) # Angular\n    if ! $DRY_RUN; then\n      echo -e \"${GREEN}Setting up Angular project...${NC}\"\n      npx @angular/cli new . --directory=. --skip-git\n    else\n      echo -e \"${YELLOW}Would set up Angular project${NC}\"\n    fi\n    ;;\n\n  6) # Static HTML/CSS/JS\n    if ! $DRY_RUN; then\n      echo -e \"${GREEN}Setting up static HTML/CSS/JS project...${NC}\"\n      mkdir -p css js images\n\n      # Create index.html\n      cat > index.html << EOF\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>$PROJECT_NAME</title>\n    <link rel=\"stylesheet\" href=\"css/styles.css\">\n</head>\n<body>\n    <header>\n        <h1>$PROJECT_NAME</h1>\n    </header>\n    <main>\n        <p>Welcome to $PROJECT_NAME</p>\n    </main>\n    <footer>\n        <p>&copy; $(date +%Y)</p>\n    </footer>\n    <script src=\"js/main.js\"></script>\n</body>\n</html>\nEOF\n\n      # Create CSS file\n      cat > css/styles.css << EOF\n/* Reset and base styles */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n        Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    line-height: 1.6;\n    color: #333;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\nheader, footer {\n    text-align: center;\n    padding: 20px 0;\n}\n\nmain {\n    min-height: 80vh;\n}\nEOF\n\n      # Create JS file\n      cat > js/main.js << EOF\n// Main JavaScript file\nconsole.log('$PROJECT_NAME loaded');\nEOF\n\n      # Setup package.json for static site\n      npm init -y\n      npm install --save-dev live-server\n\n      # Update package.json scripts\n      sed -i '' 's/\"scripts\": {/\"scripts\": {\\n    \"dev\": \"live-server\",/g' package.json\n    else\n      echo -e \"${YELLOW}Would set up static HTML/CSS/JS project${NC}\"\n    fi\n    ;;\nesac\n\n# Ask about additional packages\necho -e \"${BLUE}Would you like to install additional packages?${NC}\"\necho \"1) Tailwind CSS\"\necho \"2) Styled Components\"\necho \"3) Material UI\"\necho \"4) Bootstrap\"\necho \"5) No additional packages\"\n\nread -p \"$(echo -e $YELLOW\"Select an option (1-5): \"$NC)\" PACKAGES\n\ncase $PACKAGES in\n  1) # Tailwind CSS\n    if ! $DRY_RUN; then\n      echo -e \"${GREEN}Installing Tailwind CSS...${NC}\"\n      case $PROJECT_TYPE in\n        1|2) # React or React+TS with Vite\n          npm install -D tailwindcss postcss autoprefixer\n          npx tailwindcss init -p\n          # Add Tailwind directives to CSS\n          echo \"/* Tailwind directives */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\" > src/index.css\n          ;;\n        3) # Next.js\n          npm install -D tailwindcss postcss autoprefixer\n          npx tailwindcss init -p\n          ;;\n        4) # Vue with Vite\n          npm install -D tailwindcss postcss autoprefixer\n          npx tailwindcss init -p\n          ;;\n        5) # Angular\n          npm install -D tailwindcss postcss autoprefixer\n          npx tailwindcss init -p\n          ;;\n        6) # Static\n          npm install -D tailwindcss\n          npx tailwindcss init\n          # Create a tailwind.css file\n          echo \"@tailwind base;\n@tailwind components;\n@tailwind utilities;\" > css/tailwind.css\n          ;;\n      esac\n    else\n      echo -e \"${YELLOW}Would install Tailwind CSS${NC}\"\n    fi\n    ;;\n\n  2) # Styled Components\n    if ! $DRY_RUN; then\n      echo -e \"${GREEN}Installing Styled Components...${NC}\"\n      if [ \"$PROJECT_TYPE\" -eq 1 ] || [ \"$PROJECT_TYPE\" -eq 2 ] || [ \"$PROJECT_TYPE\" -eq 3 ]; then\n        npm install styled-components\n        npm install -D @types/styled-components\n      else\n        echo -e \"${YELLOW}Styled Components is primarily for React projects${NC}\"\n      fi\n    else\n      echo -e \"${YELLOW}Would install Styled Components${NC}\"\n    fi\n    ;;\n\n  3) # Material UI\n    if ! $DRY_RUN; then\n      echo -e \"${GREEN}Installing Material UI...${NC}\"\n      if [ \"$PROJECT_TYPE\" -eq 1 ] || [ \"$PROJECT_TYPE\" -eq 2 ] || [ \"$PROJECT_TYPE\" -eq 3 ]; then\n        npm install @mui/material @emotion/react @emotion/styled\n      elif [ \"$PROJECT_TYPE\" -eq 5 ]; then\n        npm install @angular/material\n      else\n        echo -e \"${YELLOW}Material UI is primarily for React/Angular projects${NC}\"\n      fi\n    else\n      echo -e \"${YELLOW}Would install Material UI${NC}\"\n    fi\n    ;;\n\n  4) # Bootstrap\n    if ! $DRY_RUN; then\n      echo -e \"${GREEN}Installing Bootstrap...${NC}\"\n      npm install bootstrap\n    else\n      echo -e \"${YELLOW}Would install Bootstrap${NC}\"\n    fi\n    ;;\n\n  5) # No additional packages\n    echo -e \"${GREEN}No additional packages selected${NC}\"\n    ;;\n\n  *)\n    echo -e \"${RED}Invalid option selected${NC}\"\n    ;;\nesac\n\n# Ask about backend integration\necho -e \"${BLUE}Would you like to add a backend service?${NC}\"\necho \"1) Supabase\"\necho \"2) Firebase\"\necho \"3) No backend service\"\n\nread -p \"$(echo -e $YELLOW\"Select an option (1-3): \"$NC)\" BACKEND\n\ncase $BACKEND in\n  1) # Supabase\n    if ! $DRY_RUN; then\n      echo -e \"${GREEN}Setting up Supabase integration...${NC}\"\n\n      # Install Supabase client library\n      npm install @supabase/supabase-js\n\n      # For React and Next.js projects, add auth UI\n      if [ \"$PROJECT_TYPE\" -eq 1 ] || [ \"$PROJECT_TYPE\" -eq 2 ] || [ \"$PROJECT_TYPE\" -eq 3 ]; then\n        npm install @supabase/auth-ui-react @supabase/auth-ui-shared\n      fi\n\n      # Create environment variables file\n      cat > .env.local << EOF\n# Supabase Configuration\nVITE_SUPABASE_URL=your-project-url\nVITE_SUPABASE_ANON_KEY=your-anon-key\nEOF\n\n      # Add to .gitignore if not already there\n      if ! grep -q \".env.local\" .gitignore; then\n        echo \".env.local\" >> .gitignore\n      fi\n\n      # Create a basic Supabase client file\n      mkdir -p src/lib\n\n      # Different file structure based on project type\n      if [ \"$PROJECT_TYPE\" -eq 1 ] || [ \"$PROJECT_TYPE\" -eq 2 ]; then\n        # React with Vite\n        cat > src/lib/supabase.js << EOF\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\nEOF\n      elif [ \"$PROJECT_TYPE\" -eq 3 ]; then\n        # Next.js\n        cat > src/lib/supabase.js << EOF\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\nEOF\n        # Update .env.local for Next.js\n        cat > .env.local << EOF\n# Supabase Configuration\nNEXT_PUBLIC_SUPABASE_URL=your-project-url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key\nEOF\n      elif [ \"$PROJECT_TYPE\" -eq 4 ]; then\n        # Vue with Vite\n        cat > src/lib/supabase.js << EOF\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\nEOF\n      fi\n\n      # Create a simple README example for Supabase usage\n      cat >> README.md << EOF\n\n## Supabase Integration\n\nThis project includes Supabase for backend services. To configure:\n\n1. Create a Supabase project at https://supabase.com\n2. Get your project URL and anon key\n3. Update the .env.local file with your credentials\n\n### Example Usage\n\n\\`\\`\\`javascript\nimport { supabase } from './lib/supabase'\n\n// Query data\nconst { data, error } = await supabase\n  .from('your_table')\n  .select('*')\n\n// Insert data\nconst { data, error } = await supabase\n  .from('your_table')\n  .insert([{ some_column: 'someValue' }])\n\\`\\`\\`\nEOF\n\n      echo -e \"${GREEN}Supabase integration added${NC}\"\n      echo -e \"${YELLOW}Important: Update .env.local with your actual Supabase credentials${NC}\"\n    else\n      echo -e \"${YELLOW}Would set up Supabase integration${NC}\"\n    fi\n    ;;\n\n  2) # Firebase\n    if ! $DRY_RUN; then\n      echo -e \"${GREEN}Setting up Firebase integration...${NC}\"\n\n      # Install Firebase\n      npm install firebase\n\n      # Create basic Firebase configuration\n      mkdir -p src/lib\n      cat > src/lib/firebase.js << EOF\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getAuth } from \"firebase/auth\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"YOUR_API_KEY\",\n  authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\n  projectId: \"YOUR_PROJECT_ID\",\n  storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\n  messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n  appId: \"YOUR_APP_ID\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const db = getFirestore(app);\nexport const auth = getAuth(app);\nEOF\n\n      # Update README\n      cat >> README.md << EOF\n\n## Firebase Integration\n\nThis project includes Firebase integration. To configure:\n\n1. Create a Firebase project at https://console.firebase.google.com\n2. Get your Firebase configuration\n3. Update the src/lib/firebase.js file with your credentials\nEOF\n\n      echo -e \"${GREEN}Firebase integration added${NC}\"\n      echo -e \"${YELLOW}Important: Update firebase.js with your actual Firebase credentials${NC}\"\n    else\n      echo -e \"${YELLOW}Would set up Firebase integration${NC}\"\n    fi\n    ;;\n\n  3) # No backend service\n    echo -e \"${GREEN}No backend service selected${NC}\"\n    ;;\n\n  *)\n    echo -e \"${RED}Invalid option selected${NC}\"\n    ;;\nesac\n\n# Create VS Code settings\nif ! $DRY_RUN; then\n  echo -e \"${GREEN}Creating VS Code settings...${NC}\"\n  mkdir -p .vscode\n  cat > .vscode/settings.json << EOF\n{\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": \"explicit\"\n  },\n  \"editor.tabSize\": 2,\n  \"editor.insertSpaces\": true,\n  \"files.trimTrailingWhitespace\": true,\n  \"files.insertFinalNewline\": true\n}\nEOF\nelse\n  echo -e \"${YELLOW}Would create VS Code settings${NC}\"\nfi\n\n# Initial commit\nif ! $DRY_RUN; then\n  echo -e \"${GREEN}Creating initial Git commit...${NC}\"\n  git add .\n  git commit -m \"Initial commit\"\nelse\n  echo -e \"${YELLOW}Would create initial Git commit${NC}\"\nfi\n\n# Final instructions\necho -e \"${GREEN}Project setup complete!${NC}\"\necho -e \"${BLUE}Project created at:${NC} $PROJECT_DIR\"\necho -e \"${BLUE}To get started:${NC}\"\necho -e \"  cd $PROJECT_DIR\"\n\nif [ \"$PROJECT_TYPE\" -eq 6 ]; then\n  echo -e \"  npm run dev\"\nelse\n  echo -e \"  npm install (if not already run)\"\n  echo -e \"  npm run dev (or npm start)\"\nfi\n\necho -e \"${BLUE}Happy coding!${NC}\"\n"
    },
    {
        "type": "file",
        "name": "macos-setup.sh",
        "content": "#!/bin/bash\n\n# Color codes for terminal output\nGREEN='\\033[0;32m'\nBLUE='\\033[0;34m'\nYELLOW='\\033[1;33m'\nRED='\\033[0;31m'\nNC='\\033[0m' # No Color\n\n# Default options\nINTERACTIVE=false\nSKIP_UI=false\nSKIP_KEYBOARD=false\nSKIP_FINDER=false\nSKIP_DOCK=false\nSKIP_SAFARI=false\nSKIP_TERMINAL=false\nSKIP_DEV=false\n\n# Process command line arguments\nfor arg in \"$@\"; do\n  case $arg in\n    --interactive)\n      INTERACTIVE=true\n      ;;\n    --skip-ui)\n      SKIP_UI=true\n      ;;\n    --skip-keyboard)\n      SKIP_KEYBOARD=true\n      ;;\n    --skip-finder)\n      SKIP_FINDER=true\n      ;;\n    --skip-dock)\n      SKIP_DOCK=true\n      ;;\n    --skip-safari)\n      SKIP_SAFARI=true\n      ;;\n    --skip-terminal)\n      SKIP_TERMINAL=true\n      ;;\n    --skip-dev)\n      SKIP_DEV=true\n      ;;\n    --help)\n      echo \"Usage: ./macos-setup.sh [options]\"\n      echo \"Options:\"\n      echo \"  --interactive     Ask before applying each section\"\n      echo \"  --skip-ui         Skip UI/UX settings\"\n      echo \"  --skip-keyboard   Skip keyboard and input settings\"\n      echo \"  --skip-finder     Skip Finder settings\"\n      echo \"  --skip-dock       Skip Dock settings\"\n      echo \"  --skip-safari     Skip Safari settings\"\n      echo \"  --skip-terminal   Skip Terminal settings\"\n      echo \"  --skip-dev        Skip development tool settings\"\n      echo \"  --help            Show this help message\"\n      exit 0\n      ;;\n  esac\ndone\n\necho -e \"${BLUE}========================================${NC}\"\necho -e \"${BLUE}   macOS Setup for Front-End Developers ${NC}\"\necho -e \"${BLUE}========================================${NC}\"\n\n# Display warning about system changes\necho -e \"${YELLOW}WARNING: This script modifies macOS system settings.\"\necho -e \"It's recommended to review the changes before proceeding.${NC}\"\necho\necho -e \"Interactive mode: ${INTERACTIVE}\"\necho\n\n# Continue prompt function\ncontinue_prompt() {\n  local section=$1\n\n  if $INTERACTIVE; then\n    read -p \"$(echo -e $YELLOW\"Apply $section settings? [y/n] \"$NC)\" -n 1 -r\n    echo\n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n      echo -e \"${BLUE}Skipping $section settings.${NC}\"\n      return 1\n    fi\n  fi\n\n  return 0\n}\n\n# Ask for the administrator password upfront\nsudo -v\n\n# Keep-alive: update existing `sudo` time stamp until this script has finished\nwhile true; do sudo -n true; sleep 60; kill -0 \"$$\" || exit; done 2>/dev/null &\n\n###############################################################################\n# General UI/UX                                                               #\n###############################################################################\n\napply_uiux_settings() {\n  if $SKIP_UI; then\n    echo -e \"${BLUE}Skipping UI/UX settings (--skip-ui flag used).${NC}\"\n    return\n  fi\n\n  if ! continue_prompt \"UI/UX\"; then\n    return\n  fi\n\n  echo -e \"${YELLOW}Configuring general UI/UX settings...${NC}\"\n\n  # Set computer name\n  read -p \"Enter computer name (leave blank to skip): \" COMPUTER_NAME\n  if [ -n \"$COMPUTER_NAME\" ]; then\n    sudo scutil --set ComputerName \"$COMPUTER_NAME\"\n    sudo scutil --set HostName \"$COMPUTER_NAME\"\n    sudo scutil --set LocalHostName \"$COMPUTER_NAME\"\n    sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string \"$COMPUTER_NAME\"\n  fi\n\n  # Expand save panel by default\n  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true\n  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true\n\n  # Expand print panel by default\n  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true\n  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true\n\n  # Save to disk (not to iCloud) by default\n  defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false\n\n  # Disable automatic capitalization\n  defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false\n\n  # Disable auto-correct\n  defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false\n\n  echo -e \"${GREEN}UI/UX settings applied.${NC}\"\n}\n\n###############################################################################\n# Trackpad, mouse, keyboard, and input                                        #\n###############################################################################\n\napply_input_settings() {\n  if $SKIP_KEYBOARD; then\n    echo -e \"${BLUE}Skipping keyboard and input settings (--skip-keyboard flag used).${NC}\"\n    return\n  fi\n\n  if ! continue_prompt \"keyboard and input\"; then\n    return\n  fi\n\n  echo -e \"${YELLOW}Configuring input device settings...${NC}\"\n\n  # Enable full keyboard access for all controls\n  defaults write NSGlobalDomain AppleKeyboardUIMode -int 3\n\n  # Use scroll gesture with the Ctrl (^) modifier key to zoom\n  defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true\n  defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144\n\n  # Ask before setting keyboard speed\n  if $INTERACTIVE; then\n    read -p \"$(echo -e $YELLOW\"Set faster keyboard repeat rate? (This makes keys repeat faster when held down) [y/n] \"$NC)\" -n 1 -r\n    echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      # Set a blazingly fast keyboard repeat rate\n      defaults write NSGlobalDomain KeyRepeat -int 2\n      defaults write NSGlobalDomain InitialKeyRepeat -int 15\n      echo -e \"${GREEN}Keyboard repeat rate increased.${NC}\"\n    fi\n  else\n    # Set a moderate keyboard repeat rate\n    defaults write NSGlobalDomain KeyRepeat -int 6\n    defaults write NSGlobalDomain InitialKeyRepeat -int 25\n  fi\n\n  echo -e \"${GREEN}Keyboard and input settings applied.${NC}\"\n}\n\n###############################################################################\n# Finder                                                                      #\n###############################################################################\n\napply_finder_settings() {\n  if $SKIP_FINDER; then\n    echo -e \"${BLUE}Skipping Finder settings (--skip-finder flag used).${NC}\"\n    return\n  fi\n\n  if ! continue_prompt \"Finder\"; then\n    return\n  fi\n\n  echo -e \"${YELLOW}Configuring Finder settings...${NC}\"\n\n  # Show hidden files\n  if $INTERACTIVE; then\n    read -p \"$(echo -e $YELLOW\"Show hidden files in Finder? [y/n] \"$NC)\" -n 1 -r\n    echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      defaults write com.apple.finder AppleShowAllFiles -bool true\n    fi\n  else\n    defaults write com.apple.finder AppleShowAllFiles -bool true\n  fi\n\n  # Show all filename extensions\n  defaults write NSGlobalDomain AppleShowAllExtensions -bool true\n\n  # Show status bar\n  defaults write com.apple.finder ShowStatusBar -bool true\n\n  # Show path bar\n  defaults write com.apple.finder ShowPathbar -bool true\n\n  # Keep folders on top when sorting by name\n  defaults write com.apple.finder _FXSortFoldersFirst -bool true\n\n  # When performing a search, search the current folder by default\n  defaults write com.apple.finder FXDefaultSearchScope -string \"SCcf\"\n\n  # Disable the warning when changing a file extension\n  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false\n\n  # Avoid creating .DS_Store files on network or USB volumes\n  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true\n  defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true\n\n  echo -e \"${GREEN}Finder settings applied.${NC}\"\n}\n\n###############################################################################\n# Dock, Dashboard, and hot corners                                            #\n###############################################################################\n\napply_dock_settings() {\n  if $SKIP_DOCK; then\n    echo -e \"${BLUE}Skipping Dock settings (--skip-dock flag used).${NC}\"\n    return\n  fi\n\n  if ! continue_prompt \"Dock\"; then\n    return\n  fi\n\n  echo -e \"${YELLOW}Configuring Dock settings...${NC}\"\n\n  # Set the icon size of Dock items\n  defaults write com.apple.dock tilesize -int 48\n\n  # Minimize windows into their application's icon\n  defaults write com.apple.dock minimize-to-application -bool true\n\n  # Show indicator lights for open applications in the Dock\n  defaults write com.apple.dock show-process-indicators -bool true\n\n  # Ask about auto-hide\n  if $INTERACTIVE; then\n    read -p \"$(echo -e $YELLOW\"Automatically hide and show the Dock? [y/n] \"$NC)\" -n 1 -r\n    echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      defaults write com.apple.dock autohide -bool true\n    fi\n  else\n    # Don't change by default\n    echo \"Leaving Dock autohide setting unchanged\"\n  fi\n\n  echo -e \"${GREEN}Dock settings applied.${NC}\"\n}\n\n###############################################################################\n# Safari & WebKit                                                             #\n###############################################################################\n\napply_safari_settings() {\n  if $SKIP_SAFARI; then\n    echo -e \"${BLUE}Skipping Safari settings (--skip-safari flag used).${NC}\"\n    return\n  fi\n\n  if ! continue_prompt \"Safari\"; then\n    return\n  fi\n\n  echo -e \"${YELLOW}Configuring Safari settings...${NC}\"\n\n  # Show the full URL in the address bar\n  defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true\n\n  # Prevent Safari from opening 'safe' files automatically after downloading\n  defaults write com.apple.Safari AutoOpenSafeDownloads -bool false\n\n  # Enable the Develop menu and the Web Inspector in Safari\n  defaults write com.apple.Safari IncludeDevelopMenu -bool true\n  defaults write com.apple.Safari WebKitDeveloperExtrasEnabled -bool true\n  defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true\n\n  # Enable \"Do Not Track\"\n  defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool true\n\n  echo -e \"${GREEN}Safari settings applied.${NC}\"\n}\n\n###############################################################################\n# Terminal & iTerm 2                                                          #\n###############################################################################\n\napply_terminal_settings() {\n  if $SKIP_TERMINAL; then\n    echo -e \"${BLUE}Skipping Terminal settings (--skip-terminal flag used).${NC}\"\n    return\n  fi\n\n  if ! continue_prompt \"Terminal\"; then\n    return\n  fi\n\n  echo -e \"${YELLOW}Configuring Terminal and iTerm2 settings...${NC}\"\n\n  # Only use UTF-8 in Terminal.app\n  defaults write com.apple.terminal StringEncodings -array 4\n\n  # Enable Secure Keyboard Entry in Terminal.app\n  defaults write com.apple.terminal SecureKeyboardEntry -bool true\n\n  # Ask about installing Oh My Zsh\n  if [ ! -d \"$HOME/.oh-my-zsh\" ] && $INTERACTIVE; then\n    read -p \"$(echo -e $YELLOW\"Install Oh My Zsh? [y/n] \"$NC)\" -n 1 -r\n    echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      echo -e \"${GREEN}Installing Oh My Zsh...${NC}\"\n      sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" \"\" --unattended\n    fi\n  elif [ ! -d \"$HOME/.oh-my-zsh\" ]; then\n    echo \"Skipping Oh My Zsh installation\"\n  else\n    echo \"Oh My Zsh is already installed.\"\n  fi\n\n  echo -e \"${GREEN}Terminal settings applied.${NC}\"\n}\n\n###############################################################################\n# Development settings                                                        #\n###############################################################################\n\napply_dev_settings() {\n  if $SKIP_DEV; then\n    echo -e \"${BLUE}Skipping development settings (--skip-dev flag used).${NC}\"\n    return\n  fi\n\n  if ! continue_prompt \"development\"; then\n    return\n  fi\n\n  echo -e \"${YELLOW}Configuring development settings...${NC}\"\n\n  # Configure Git if installed\n  if command -v git &> /dev/null; then\n    echo -e \"${YELLOW}Git is installed. Would you like to configure it?${NC}\"\n    read -p \"$(echo -e $YELLOW\"Configure Git? [y/n] \"$NC)\" -n 1 -r\n    echo\n\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      # Ask for user info\n      read -p \"Enter your Git username: \" GIT_USERNAME\n      read -p \"Enter your Git email: \" GIT_EMAIL\n\n      # Set Git configuration\n      git config --global user.name \"$GIT_USERNAME\"\n      git config --global user.email \"$GIT_EMAIL\"\n\n      # Set common Git configuration\n      git config --global init.defaultBranch main\n      git config --global core.editor \"code --wait\"\n      git config --global pull.rebase true\n\n      echo -e \"${GREEN}Git configured.${NC}\"\n    fi\n  fi\n\n  echo -e \"${GREEN}Development settings applied.${NC}\"\n}\n\n###############################################################################\n# Apply settings                                                              #\n###############################################################################\n\napply_uiux_settings\napply_input_settings\napply_finder_settings\napply_dock_settings\napply_safari_settings\napply_terminal_settings\napply_dev_settings\n\n###############################################################################\n# Finalize changes                                                            #\n###############################################################################\n\necho -e \"${YELLOW}Do you want to restart affected applications to apply changes?${NC}\"\nread -p \"$(echo -e $YELLOW\"Restart applications? [y/n] \"$NC)\" -n 1 -r\necho\n\nif [[ $REPLY =~ ^[Yy]$ ]]; then\n  echo -e \"${YELLOW}Restarting affected applications...${NC}\"\n  for app in \"Finder\" \"Dock\" \"Safari\" \"Terminal\"; do\n    killall \"${app}\" &> /dev/null\n  done\nfi\n\necho -e \"${GREEN}macOS setup complete!${NC}\"\necho -e \"${YELLOW}Note: Some changes may require a logout/restart to take effect.${NC}\"\n"
    },
    {
        "type": "file",
        "name": "package.json",
        "content": "{\n  \"dependencies\": {\n    \"ignore\": \"^7.0.4\"\n  }\n}\n"
    },
    { "type": "directory", "name": "scripts", "children": [] },
    {
        "type": "file",
        "name": "settings.json",
        "content": "{\n    \"editor.fontFamily\": \"JetBrains Mono, Menlo, Monaco, 'Courier New', monospace\",\n    \"editor.fontSize\": 14,\n    \"editor.lineHeight\": 24,\n    \"editor.fontLigatures\": true,\n\n    // Editor general settings\n    \"editor.formatOnSave\": true,\n    \"editor.formatOnPaste\": true,\n    \"editor.codeActionsOnSave\": {\n        \"source.fixAll\": \"explicit\",\n        \"source.fixAll.eslint\": \"explicit\",\n        \"source.organizeImports\": \"explicit\"\n    },\n    \"editor.tabSize\": 2,\n    \"editor.insertSpaces\": true,\n    \"editor.detectIndentation\": false,\n    \"editor.bracketPairColorization.enabled\": true,\n    \"editor.guides.bracketPairs\": \"active\",\n    \"editor.linkedEditing\": true,\n    \"editor.suggest.preview\": true,\n    \"editor.wordWrap\": \"off\",\n    \"editor.minimap.renderCharacters\": false,\n    \"editor.minimap.maxColumn\": 100,\n    \"editor.smoothScrolling\": true,\n    \"editor.cursorSmoothCaretAnimation\": \"on\",\n    \"editor.cursorBlinking\": \"expand\",\n    \"editor.mouseWheelZoom\": true,\n\n    // Window settings\n    \"window.titleBarStyle\": \"custom\",\n    \"window.zoomLevel\": 0,\n\n    // Workbench settings\n    \"workbench.iconTheme\": \"material-icon-theme\",\n    \"workbench.colorTheme\": \"One Dark Pro\",\n    \"workbench.startupEditor\": \"none\",\n    \"workbench.editor.enablePreview\": false,\n    \"workbench.editor.labelFormat\": \"short\",\n    \"workbench.tree.indent\": 20,\n    \"workbench.tree.renderIndentGuides\": \"always\",\n    \"workbench.list.smoothScrolling\": true,\n\n    // Files settings\n    \"files.trimTrailingWhitespace\": true,\n    \"files.insertFinalNewline\": true,\n    \"files.eol\": \"\\n\",\n    \"files.autoSave\": \"onFocusChange\",\n    \"files.exclude\": {\n        \"**/.git\": true,\n        \"**/node_modules\": true,\n        \"**/dist\": false,\n        \"**/build\": false\n    },\n    \"files.associations\": {\n        \"*.jsx\": \"javascriptreact\",\n        \"*.tsx\": \"typescriptreact\"\n    },\n\n    // Terminal settings\n    \"terminal.integrated.fontFamily\": \"JetBrains Mono, MesloLGS NF\",\n    \"terminal.integrated.fontSize\": 14,\n    \"terminal.integrated.cursorBlinking\": true,\n    \"terminal.integrated.cursorStyle\": \"line\",\n\n    // Git settings\n    \"git.enableSmartCommit\": true,\n    \"git.confirmSync\": false,\n    \"git.autofetch\": true,\n    \"git.openRepositoryInParentFolders\": \"always\",\n    \"gitlens.hovers.currentLine.over\": \"line\",\n    \"gitlens.codeLens.enabled\": true,\n\n    // Live Server\n    \"liveServer.settings.donotShowInfoMsg\": true,\n    \"liveServer.settings.donotVerifyTags\": true,\n\n    // Explorer\n    \"explorer.confirmDragAndDrop\": false,\n    \"explorer.confirmDelete\": false,\n    \"explorer.confirmPasteNative\": false,\n\n    // JavaScript/TypeScript settings\n    \"javascript.updateImportsOnFileMove.enabled\": \"always\",\n    \"typescript.updateImportsOnFileMove.enabled\": \"always\",\n    \"javascript.suggest.autoImports\": true,\n    \"typescript.suggest.autoImports\": true,\n    \"javascript.preferences.quoteStyle\": \"single\",\n    \"typescript.preferences.quoteStyle\": \"single\",\n\n    // ESLint settings\n    \"eslint.options\": {\n        \"configFile\": \"~/.eslintrc.json\"\n    },\n    \"eslint.enable\": true,\n    \"eslint.validate\": [\n        \"javascript\",\n        \"javascriptreact\",\n        \"typescript\",\n        \"typescriptreact\",\n        \"vue\",\n        \"html\"\n    ],\n\n    // Prettier settings\n    \"prettier.requireConfig\": true,\n    \"prettier.configPath\": \"~/.prettierrc\",\n    \"prettier.singleQuote\": true,\n    \"prettier.trailingComma\": \"es5\",\n    \"prettier.tabWidth\": 2,\n    \"prettier.semi\": true,\n\n    // NPM\n    \"npm.packageManager\": \"npm\",\n\n    // Language-specific settings\n    \"[javascript]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[javascriptreact]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[typescript]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[typescriptreact]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[json]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[jsonc]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[html]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[css]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[scss]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[less]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[vue]\": {\n        \"editor.defaultFormatter\": \"Vue.volar\"\n    },\n    \"[markdown]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n        \"editor.wordWrap\": \"on\"\n    },\n\n    // Extensions settings\n    \"path-intellisense.mappings\": {\n        \"@\": \"${workspaceRoot}/src\"\n    },\n    \"material-icon-theme.folders.associations\": {\n        \"components\": \"Components\",\n        \"ui\": \"Components\",\n        \"atoms\": \"Components\",\n        \"molecules\": \"Components\",\n        \"organisms\": \"Components\",\n        \"services\": \"Helper\",\n        \"stores\": \"Redux-store\",\n        \"features\": \"Tools\",\n        \"pages\": \"Views\"\n    },\n    \"emmet.includeLanguages\": {\n        \"javascript\": \"javascriptreact\",\n        \"typescript\": \"typescriptreact\",\n        \"vue-html\": \"html\"\n    },\n    \"emmet.syntaxProfiles\": {\n        \"javascript\": \"jsx\",\n        \"typescript\": \"tsx\"\n    },\n\n    // Tailwind CSS settings (if using)\n    \"tailwindCSS.includeLanguages\": {\n        \"javascript\": \"javascript\",\n        \"typescript\": \"typescript\",\n        \"javascriptreact\": \"javascriptreact\",\n        \"typescriptreact\": \"typescriptreact\",\n        \"vue\": \"vue\",\n        \"html\": \"html\"\n    },\n    \"tailwindCSS.emmetCompletions\": true,\n\n    // Other settings\n    \"diffEditor.ignoreTrimWhitespace\": false,\n    \"security.workspace.trust.untrustedFiles\": \"open\",\n    \"open-all-files.recursive\": true,\n    \"editor.inlineSuggest.suppressSuggestions\": true,\n    \"chat.editing.alwaysSaveWithGeneratedChanges\": true,\n    \"cody.commandCodeLenses\": true,\n    \"openctx.providers\": {}\n}\n"
    },
    {
        "type": "file",
        "name": "setup.sh",
        "content": "#!/bin/bash\n\n# Variables\nDOTFILES_DIR=$(pwd)\nBACKUP_DIR=\"$HOME/dotfiles_backup\"\nSAFE_MODE=false\nSKIP_TEMPLATES=false\nSKIP_NODE_MANAGER=false\nSKIP_GLOBAL_PACKAGES=false\n\n# Process arguments\nfor arg in \"$@\"; do\n  case $arg in\n    --safe)\n      SAFE_MODE=true\n      ;;\n    --skip-templates)\n      SKIP_TEMPLATES=true\n      ;;\n    --skip-node)\n      SKIP_NODE_MANAGER=true\n      ;;\n    --skip-globals)\n      SKIP_GLOBAL_PACKAGES=true\n      ;;\n    --help)\n      echo \"Usage: ./setup.sh [options]\"\n      echo \"Options:\"\n      echo \"  --safe               Apply only symlinks, skip installing software\"\n      echo \"  --skip-templates     Skip creating project templates\"\n      echo \"  --skip-node          Skip installing Node.js manager\"\n      echo \"  --skip-globals       Skip installing global npm packages\"\n      echo \"  --help               Show this help message\"\n      exit 0\n      ;;\n  esac\ndone\n\n# Create backup directory if it doesn't exist\nif [ ! -d \"$BACKUP_DIR\" ]; then\n    echo \"Creating backup directory at $BACKUP_DIR\"\n    mkdir -p \"$BACKUP_DIR\"\nfi\n\n# Function to create symlinks and backup existing files\ncreate_symlink() {\n    local source_file=$1\n    local target_file=$2\n\n    # Check if source file exists\n    if [ ! -e \"$source_file\" ]; then\n        echo \"Warning: Source file $source_file does not exist, skipping.\"\n        return\n    fi\n\n    if [ -e \"$target_file\" ]; then\n        echo \"Backing up $target_file to $BACKUP_DIR\"\n        # Create timestamp-based backup\n        cp -R \"$target_file\" \"$BACKUP_DIR/$(basename \"$target_file\").$(date +%Y%m%d%H%M%S).bak\"\n        rm -rf \"$target_file\"\n    fi\n\n    echo \"Creating symlink for $source_file\"\n    ln -s \"$source_file\" \"$target_file\"\n}\n\n# Setup symlinks\nsetup_symlinks() {\n    echo \"Setting up symlinks...\"\n\n    # Check if files exist before creating symlinks\n    if [ -f \"$DOTFILES_DIR/.eslintrc.json\" ]; then\n        create_symlink \"$DOTFILES_DIR/.eslintrc.json\" \"$HOME/.eslintrc.json\"\n    fi\n\n    if [ -f \"$DOTFILES_DIR/.prettierrc\" ]; then\n        create_symlink \"$DOTFILES_DIR/.prettierrc\" \"$HOME/.prettierrc\"\n    fi\n\n    if [ -f \"$DOTFILES_DIR/.zshrc\" ]; then\n        create_symlink \"$DOTFILES_DIR/.zshrc\" \"$HOME/.zshrc\"\n    fi\n\n    # VS Code settings\n    if [ -f \"$DOTFILES_DIR/.vscode/settings.json\" ]; then\n        mkdir -p \"$HOME/Library/Application Support/Code/User\"\n        create_symlink \"$DOTFILES_DIR/.vscode/settings.json\" \"$HOME/Library/Application Support/Code/User/settings.json\"\n    fi\n\n    echo \"Symlinks setup complete.\"\n}\n\n# Install Node.js version manager (fnm)\ninstall_node_manager() {\n    if $SKIP_NODE_MANAGER; then\n        echo \"Skipping Node.js manager installation (--skip-node flag used)\"\n        return\n    fi\n\n    if command -v fnm &> /dev/null; then\n        echo \"Fast Node Manager (fnm) already installed.\"\n    else\n        echo \"Installing Fast Node Manager (fnm)...\"\n        curl -fsSL https://fnm.vercel.app/install | bash\n\n        # Source fnm to use it\n        export PATH=\"$HOME/.fnm:$PATH\"\n        eval \"`fnm env`\"\n\n        # Install latest LTS version of Node.js\n        echo \"Installing latest LTS version of Node.js...\"\n        fnm install --lts\n        fnm use lts-latest\n        fnm default $(fnm current)\n\n        echo \"Node.js setup complete. Current version: $(node -v)\"\n    fi\n}\n\n# Setup common front-end global packages\nsetup_npm_globals() {\n    if $SKIP_GLOBAL_PACKAGES; then\n        echo \"Skipping global npm packages installation (--skip-globals flag used)\"\n        return\n    fi\n\n    if ! command -v npm &> /dev/null; then\n        echo \"npm not found. Make sure Node.js is installed correctly.\"\n        return\n    fi\n\n    echo \"Installing global NPM packages for front-end development...\"\n\n    # Create an array of packages\n    packages=(\n        \"gulp-cli\"           # Task runner (conflicts with Homebrew)\n        \"gatsby-cli\"         # Gatsby CLI (conflicts with Homebrew)\n\n        # Testing tools\n        \"cypress\"            # E2E testing\n        \"jest\"               # Testing framework\n        \"mocha\"              # Testing framework\n        \"chai\"               # Testing assertions\n\n        # Web dev utilities\n        \"typescript\"         # TypeScript compiler\n        \"eslint\"             # Linting\n        \"prettier\"           # Code formatting\n        \"serve\"              # Static file serving\n        \"http-server\"        # Simple HTTP server\n        \"lighthouse\"         # Performance testing\n        \"npm-check-updates\"  # Dependency updater\n    )\n\n    # Optional packages - ask user\n    read -p \"Install deployment tools (firebase, vercel, netlify)? (y/n) \" -n 1 -r\n    echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n        packages+=(\n            \"firebase-tools\"\n            \"vercel\"\n            \"netlify-cli\"\n            \"surge\"\n        )\n    fi\n\n    # Before installing each npm package, check if a Homebrew version exists\n    for package in \"${packages[@]}\"; do\n        echo \"Installing $package...\"\n        if [ -f \"/opt/homebrew/bin/$package\" ]; then\n            echo \"Found existing Homebrew version of $package, removing...\"\n            rm \"/opt/homebrew/bin/$package\"\n        fi\n        npm install -g \"$package\"\n    done\n\n    echo \"Global NPM packages installation complete.\"\n}\n\n# Create frontend project templates directory\nsetup_project_templates() {\n    if $SKIP_TEMPLATES; then\n        echo \"Skipping project templates creation (--skip-templates flag used)\"\n        return\n    fi\n\n    TEMPLATES_DIR=\"$HOME/GitHub/project-templates\"\n\n    # Ask user before proceeding\n    read -p \"Create project templates in $TEMPLATES_DIR? (y/n) \" -n 1 -r\n    echo\n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n        echo \"Skipping project templates creation.\"\n        return\n    fi\n\n    echo \"Creating project templates directory at $TEMPLATES_DIR\"\n    mkdir -p \"$TEMPLATES_DIR\"\n\n    # Function to create a template\n    create_template() {\n        local name=$1\n        local type=$2\n\n        echo \"Setting up $name template...\"\n        mkdir -p \"$TEMPLATES_DIR/$name\"\n\n        # Check if directory is empty\n        if [ \"$(ls -A \"$TEMPLATES_DIR/$name\")\" ]; then\n            read -p \"Template directory $TEMPLATES_DIR/$name is not empty. Overwrite? (y/n) \" -n 1 -r\n            echo\n            if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n                echo \"Skipping $name template.\"\n                return\n            fi\n            # Clear directory\n            rm -rf \"$TEMPLATES_DIR/$name\"/*\n        fi\n\n        cd \"$TEMPLATES_DIR/$name\"\n\n        case $type in\n            \"react\")\n                echo \"Creating React template with Vite...\"\n                npm create vite@latest . -- --template react-ts\n                ;;\n            \"vue\")\n                echo \"Creating Vue template with Vite...\"\n                npm create vite@latest . -- --template vue-ts\n                ;;\n            \"static\")\n                echo \"Creating static site template...\"\n                mkdir -p css js images\n\n                # Create basic index.html\n                cat > index.html << EOF\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Static Site Template</title>\n    <link rel=\"stylesheet\" href=\"css/styles.css\">\n</head>\n<body>\n    <header>\n        <h1>Static Site Template</h1>\n    </header>\n    <main>\n        <p>Ready to build!</p>\n    </main>\n    <footer>\n        <p>&copy; $(date +%Y)</p>\n    </footer>\n    <script src=\"js/main.js\"></script>\n</body>\n</html>\nEOF\n\n                # Create basic CSS\n                cat > css/styles.css << EOF\n/* Reset and base styles */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n        Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    line-height: 1.6;\n    color: #333;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\nheader, footer {\n    text-align: center;\n    padding: 20px 0;\n}\n\nmain {\n    min-height: 80vh;\n}\nEOF\n\n                # Create basic JS\n                cat > js/main.js << EOF\n// Your JavaScript goes here\nconsole.log('Static site template loaded');\nEOF\n                ;;\n        esac\n\n        echo \"$name template created successfully.\"\n    }\n\n    # Create templates\n    create_template \"react-template\" \"react\"\n    create_template \"vue-template\" \"vue\"\n    create_template \"static-site-template\" \"static\"\n\n    echo \"Project templates created at $TEMPLATES_DIR\"\n}\n\n# Main setup\necho \"=== Front-End Development Environment Setup ===\"\necho \"This script will set up your development environment.\"\n\n# Check if running in safe mode\nif $SAFE_MODE; then\n    echo \"Running in safe mode: only symlinks will be created.\"\n    setup_symlinks\n    echo \"Safe setup complete. To run full setup, run without --safe flag.\"\n    exit 0\nfi\n\n# Run the setup in stages\nsetup_symlinks\n\n# If Node.js is not installed and we're not skipping it\nif ! command -v node &> /dev/null && ! $SKIP_NODE_MANAGER; then\n    install_node_manager\nelif ! $SKIP_NODE_MANAGER; then\n    echo \"Node.js is already installed. Current version: $(node -v)\"\n    read -p \"Do you want to install/update the Node version manager? (y/n) \" -n 1 -r\n    echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n        install_node_manager\n    fi\nfi\n\n# If Node.js is installed and we're not skipping global packages\nif command -v node &> /dev/null && ! $SKIP_GLOBAL_PACKAGES; then\n    setup_npm_globals\nfi\n\n# Set up project templates if not skipped\nif ! $SKIP_TEMPLATES; then\n    setup_project_templates\nfi\n\necho \"Front-end development environment setup complete!\"\necho \"\"\necho \"Next steps:\"\necho \"1. Run 'source ~/.zshrc' to load your new shell configuration\"\necho \"2. Review and run './macos-setup.sh --interactive' for macOS optimizations\"\necho \"3. Use './fe-init.sh' to create new front-end projects\"\n"
    }
]
